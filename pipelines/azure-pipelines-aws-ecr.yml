trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - pipelines/*
    - test/*
    - README.md
    - .dockerignore
    - .gitignore
 
variables:
- name: appName
  value: 'ScanApp'
- name: tag
  value: '$(Build.BuildId)' 
- name: awsCredentials
  value: 'aws-dev' 
- name: awsRegion
  value: 'eu-west-1' 
- name: awsAccount
  value: '9433277812'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Bash@3
  displayName: Create application image
  inputs:
    targetType: 'inline'
    script: |
      docker build -t  ${{ lower(variables.appName) }}:$(tag) .
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: AWSShellScript@1
  displayName: Create ECR repository
  inputs:
    awsCredentials: '$(awsCredentials)'
    regionName: '$(awsRegion)'
    scriptType: 'inline'
    inlineScript: |
      aws ecr describe-repositories --repository-names ${{ lower(variables.appName) }} || aws ecr create-repository --repository-name ${{ lower(variables.appName) }} --image-scanning-configuration scanOnPush=true

- task: AWSShellScript@1
  displayName: Push image to ECR repository
  inputs:
    awsCredentials: '$(awsCredentials)'
    regionName: '$(awsRegion)'
    scriptType: 'inline'
    inlineScript: |
      aws ecr get-login-password --region $(awsRegion) | docker login --username AWS --password-stdin $(awsAccount).dkr.ecr.$(awsRegion).amazonaws.com
      docker tag ${{ lower(variables.appName) }}:$(tag)  $(awsAccount).dkr.ecr.$(awsRegion).amazonaws.com/${{ lower(variables.appName) }}:$(tag)
      docker push $(awsAccount).dkr.ecr.$(awsRegion).amazonaws.com/${{ lower(variables.appName) }}:$(tag)
   
- task: AWSShellScript@1
  displayName: Check security vulnerabilities
  inputs:
    awsCredentials: '$(awsCredentials)'
    regionName: '$(awsRegion)'
    scriptType: 'inline'
    inlineScript: |
      aws ecr wait image-scan-complete --repository-name ${{ lower(variables.appName) }} --image-id imageTag=$(tag)
      SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name ${{ lower(variables.appName) }} --image-id imageTag=$(tag) | jq '.imageScanFindings.findingSeverityCounts')      
      CRITICAL=$(echo $SCAN_FINDINGS | jq '.CRITICAL')
      HIGH=$(echo $SCAN_FINDINGS | jq '.HIGH')
      MEDIUM=$(echo $SCAN_FINDINGS | jq '.MEDIUM')
      LOW=$(echo $SCAN_FINDINGS | jq '.LOW')
      INFORMATIONAL=$(echo $SCAN_FINDINGS | jq '.INFORMATIONAL')
      UNDEFINED=$(echo $SCAN_FINDINGS | jq '.UNDEFINED')
      if [ $CRITICAL != null ]; then
        echo Docker image contains vulnerabilities at CRITICAL level. The image will be deleted.
        aws ecr batch-delete-image --repository-name ${{ lower(variables.appName) }} --image-ids imageTag=$(tag)
        exit 1;
      fi
      if [ $HIGH != null ]; then
        echo Docker image contains vulnerabilities at HIGH level. The image will be deleted.
        aws ecr batch-delete-image --repository-name ${{ lower(variables.appName) }} --image-ids imageTag=$(tag)
        exit 1;
      fi
      if [ $MEDIUM != null || $LOW != null || $INFORMATIONAL != null ]; then
        echo Docker image contains medium or lower vulnerabilities.
      fi
   